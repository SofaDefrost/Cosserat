# -*- coding: utf-8 -*-

import Sofa
import SofaPython
from math import sin,cos, sqrt, pi
import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


class Animation(Sofa.PythonScriptController):
    
    def __init__(self, rigidBaseNode, rateAngularDeformNode):
        self.rigidBaseNode = rigidBaseNode
        self.rateAngularDeformNode = rateAngularDeformNode
        
        self.rate = 1;
        self.angularRate=0.1;
        
        return;

                
                
                
    def initGraph(self, nodeRigid):
        self.rigidBaseMO = self.rigidBaseNode.getObject('RigidBaseMO')
        self.rateAngularDeformMO = self.rateAngularDeformNode.getObject('rateAngularDeformMO')

    
    def onKeyPressed(self, c):
        
        if ord(c)==19: # up
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][1] += self.rate 
            self.rigidBaseMO.findData('position').value = pos
            
            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][1] += self.angularRate 
            self.rateAngularDeformMO.findData('position').value = posA            
            
        
        if ord(c)==21: # down
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][1] -= self.rate 
            self.rigidBaseMO.findData('position').value = pos
            
            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][1] -= self.angularRate 
            self.rateAngularDeformMO.findData('position').value = posA   
            

        if ord(c)==18: # left
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][2] -= self.rate 
            self.rigidBaseMO.findData('position').value = pos
            
            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][2] -= self.angularRate 
            self.rateAngularDeformMO.findData('position').value = posA               
        
        if ord(c)==20: # right
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][2] += self.rate 
            self.rigidBaseMO.findData('position').value = pos
            
            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][2] += self.angularRate 
            self.rateAngularDeformMO.findData('position').value = posA               
        



def normalize(q):
    norm = sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]+q[3]*q[3]);
    q_return= q 
    for i in range(4):
        q_return[i] = q[i]/sqrt(norm);
        
    return q_return



#Multiplication of two quaternions (gives the composition of the two rotation)
def rotateQuat(q1,q2):
    c0 = q1[3]*q2[3] - q1[0]*q2[0] - q1[1]*q2[1] - q1[2]*q2[2]
    c1 = q1[3]*q2[0] + q1[0]*q2[3] + q1[1]*q2[2] - q1[2]*q2[1]
    c2 = q1[3]*q2[1] + q1[1]*q2[3] + q1[2]*q2[0] - q1[0]*q2[2]
    c3 = q1[3]*q2[2] + q1[2]*q2[3] + q1[0]*q2[1] - q1[1]*q2[0]

    q1 = [c1,c2,c3,c0]

    return q1

            
            

#Rotate a vector using a quaternion v'=qvq(-1)
def rotate(v,q):
    c =[ ]
    c = c+[ ((1.0 - 2.0 * (q[1] * q[1] + q[2] * q[2]))*v[0] + (2.0 * (q[0] * q[1] - q[2] * q[3])) * v[1] + (2.0 * (q[2] * q[0] + q[1] * q[3])) * v[2])]
    c = c+[ ((2.0 * (q[0] * q[1] + q[2] * q[3]))*v[0] + (1.0 - 2.0 * (q[2] * q[2] + q[0] * q[0]))*v[1] + (2.0 * (q[1] * q[2] - q[0] * q[3]))*v[2]) ]
    c = c+[ ((2.0 * (q[2] * q[0] - q[1] * q[3]))*v[0] + (2.0 * (q[1] * q[2] + q[0] * q[3]))*v[1] + (1.0 - 2.0 * (q[1] * q[1] + q[0] * q[0]))*v[2]) ]


    return c



def inverseQuat(q):
    return [ -q[0], -q[1], -q[2], q[3] ]


def inverseTransform(a_H_b):
    b_H_a=[ ]
    q = [ a_H_b[3], a_H_b[4], a_H_b[5], a_H_b[6] ] ;
    v = rotate([ a_H_b[0], a_H_b[1],a_H_b[2] ], inverseQuat(q));
    b_H_a= b_H_a +  [-v[0], -v[1], -v[2]];
    b_H_a= b_H_a +  inverseQuat( q ) ;
    
    return b_H_a






    
def composeTransform(a_H_b, b_H_c):
    a_H_c = [ ]
    
    
    b_c_in_a = rotate([ b_H_c[0], b_H_c[1], b_H_c[2]],  [a_H_b[3], a_H_b[4], a_H_b[5],a_H_b[6]]  )
    
    
    a_H_c = a_H_c + [ a_H_b[0] + b_c_in_a[0],  a_H_b[1] + b_c_in_a[1], a_H_b[2] + b_c_in_a[2] ]     
    a_H_c = a_H_c + rotateQuat([a_H_b[3], a_H_b[4], a_H_b[5],a_H_b[6]] , [b_H_c[3], b_H_c[4], b_H_c[5],b_H_c[6]] )  
    
    return a_H_c


def compute_b_H_c(a_H_b,a_H_c):
    return composeTransform(inverseTransform(a_H_b),a_H_c)



######## to be improved:
def dummyInterpolateTransform(a_H_b, a_H_c, alpha):
    
    a_H_result = [0,0,0, 0,0,0,1];
    
    for i in range(3):
        a_H_result[i] = (1-alpha)*a_H_b[i] + alpha*a_H_c[i]
    
    q = [0,0,0,1];
    for i in range(4):
        q[i] =  (1-alpha)*a_H_b[i+3] + alpha*a_H_c[i+3]
    
    q = normalize(q)
    
    for i in range(4):
        a_H_result[i+3]  = q[i]
    
    return a_H_result
        
    
    
        
        
        



def createScene(rootNode):
    
                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots SofaPython SofaSparseSolver CosseratPlugin', printLog='0')
                rootNode.createObject('VisualStyle', displayFlags='hideVisualModels showBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')
                
                rootNode.createObject('RequiredPlugin', name='BeamAdapter')

                rootNode.createObject('CollisionPipeline', verbose="0")
                rootNode.createObject('BruteForceDetection', name="N2")
                rootNode.gravity = "0 -9810 0"
                rootNode.dt="0.01"
                #rootNode.createObject('BackgroundSetting', color='0 0.168627 0.511765')
                #rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")
                #rootNode.createObject('PythonScriptController', filename="controller/FingerController.py", classname="controller")
                
                
                
                ###############
                ## RigidBase
                ###############
                rigidBaseNode= rootNode.createChild('rigidBase')
                RigidBaseMO = rigidBaseNode.createObject('MechanicalObject', template='Rigid3d', name="RigidBaseMO", position="0 0 0  0 0 0 1", showObject='1', showObjectScale='1')
                
                
                ###############
                ## Rate of angular Deformation  (2 sections)
                ###############
                
                rateAngularDeformNode = rootNode.createChild('rateAngularDeform')
                rateAngularDeformMO = rateAngularDeformNode.createObject('MechanicalObject', template='Vec3d', name='rateAngularDeformMO', position='0.15 0.0 0.0   0.0 0.0 0 ') # (2 series of 3 angles for 2 sections. we suppose that the lenght is 10 for each)
                
                
                #############@
                ### Animation (to move the dofs)
                ##############
                anim = Animation(rigidBaseNode,rateAngularDeformNode);
                
                
                ##############
                ## Frames
                ##############
                # the node of the frame needs to inherit from rigidBaseMO and rateAngularDeform
                mappedFrameNode = rigidBaseNode.createChild('MappedFrames')
                rateAngularDeformNode.addChild(mappedFrameNode)
                
                framesMO = mappedFrameNode.createObject('MechanicalObject', template='Rigid3d', name="FramesMO", position="0.5 0 0  0 0 0 1  5 0 0 0 0 0 1   11 0 0  0 0 0 1   15 0 0 0 0 0 1  19 0 0  0 0 0 1", showObject='1', showObjectScale='1')
                
                # The mapping has two inputs: RigidBaseMO and rateAngularDeformMO
                #                 one output: FramesMO
                
                inputMO = rateAngularDeformMO.getLinkPath() # + " " + RigidBaseMO.getLinkPath()
                #inputMO = rateAngularDeformMO.getLinkPath() 
                inputMO_rigid = RigidBaseMO.getLinkPath()
                outputMO = framesMO.getLinkPath()
                # TODO:
                mappedFrameNode.createObject('POEMapping', curv_abs_input1='10 20', curv_abs_input2='0.5 5 11 15 19', input1=inputMO, input2=inputMO_rigid,output=outputMO )
                


                
                
                
                
          
                return rootNode
