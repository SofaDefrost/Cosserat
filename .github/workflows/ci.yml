name: Cosserat-CI

# Controls when the action will run. 
on:
  workflow_dispatch:
  pull_request:
  push:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-test:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        sofa_branch: [master]
        python_version: ['3.8']

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: (Mac) Workaround for homebrew
        shell: bash
        if: runner.os == 'macOS'
        run: |
          rm -f /usr/local/bin/2to3
          rm -f /usr/local/bin/idle3
          rm -f /usr/local/bin/pydoc3
          rm -f /usr/local/bin/python3
          rm -f /usr/local/bin/python3-config
          rm -f /usr/local/bin/2to3-3.11
          rm -f /usr/local/bin/idle3.11
          rm -f /usr/local/bin/pydoc3.11
          rm -f /usr/local/bin/python3.11
          rm -f /usr/local/bin/python3.11-config
          rm -f /usr/local/bin/go
          rm -f /usr/local/bin/gofmt

      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v4
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'standard'
          sofa_with_sofapython3: 'false'
          python_version: '${{ matrix.python_version }}'
          pybind11_version: '2.6.2'

      - name: Install SofaPython3
        shell: bash
        run: |
          SofaPython3_ROOT="$GITHUB_WORKSPACE/SofaPython3"
          mkdir -p "${{ runner.temp }}/sp3_tmp/zip" "${{ runner.temp }}/sp3_tmp/binaries" "$SofaPython3_ROOT"
          url="https://github.com/sofa-framework/SofaPython3/releases/download"
          url="${url}/release-master-nightly/SofaPython3_master-nightly_python-${{ matrix.python_version }}_for-SOFA-${{ matrix.sofa_branch }}_${{ runner.os }}.zip"
          echo "Getting SofaPython3 from $url"
          curl --output "${{ runner.temp }}/sp3_tmp/SofaPython3.zip" -L $url
          unzip -qq "${{ runner.temp }}/sp3_tmp/SofaPython3.zip" -d "${{ runner.temp }}/sp3_tmp/binaries"
          mv "${{ runner.temp }}"/sp3_tmp/binaries/SofaPython3_*/* "$SofaPython3_ROOT"
          echo "SofaPython3_ROOT=$SofaPython3_ROOT" | tee -a $GITHUB_ENV
          echo "SofaPython3_DIR=$SofaPython3_ROOT/lib/cmake/SofaPython3" | tee -a $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}

      - name: Build and install
        shell: bash
        run: |
          cmake_options="-GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
            -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
            -DPYTHON_ROOT=$PYTHON_ROOT -DPython_ROOT=$PYTHON_ROOT \
            -DPYTHON_EXECUTABLE=$PYTHON_EXE -DPython_EXECUTABLE=$PYTHON_EXE"
          if [ -e "$(command -v ccache)" ]; then
            cmake_options="$cmake_options -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"
          fi
          cmake_options="$(echo $cmake_options)" # prettify
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake $cmake_options ../src \
              && ninja install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake $cmake_options ../src
            ninja install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi

      - name: Create artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: CosseratPlugin_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

      - name: Install artifact
        uses: actions/download-artifact@v2
        with:
          name: CosseratPlugin_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_ARTIFACT_PATH }}

      # - name: Set env vars for tests
      #   shell: bash
      #   run: |
      #     # Set env vars for tests
      #     if [[ "$RUNNER_OS" == "Windows" ]]; then
      #       echo "$(cd $WORKSPACE_ARTIFACT_PATH/lib && pwd -W)" >> $GITHUB_PATH
      #       echo "$(cd $WORKSPACE_ARTIFACT_PATH/bin && pwd -W)" >> $GITHUB_PATH
      #     elif [[ "$RUNNER_OS" == "macOS" ]]; then
      #       echo "DYLD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
      #     fi
      #     echo "LD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
      #     # Add execution right on the tests
      #     chmod +x $WORKSPACE_BUILD_PATH/bin/*_test${{ steps.sofa.outputs.exe }}
           
      # - name: Check environment vars for tests
      #   shell: bash
      #   run: |
      #     echo '------ ls -la "$WORKSPACE_SRC_PATH" ------'
      #     ls -la "$WORKSPACE_SRC_PATH"
      #     echo '------ ls -la "$WORKSPACE_BUILD_PATH" ------'
      #     ls -la "$WORKSPACE_BUILD_PATH"
      #     echo '------ ls -la "$WORKSPACE_INSTALL_PATH" ------'
      #     ls -la "$WORKSPACE_INSTALL_PATH"
      #     echo '------ ls -la "$WORKSPACE_ARTIFACT_PATH" ------'
      #     ls -la "$WORKSPACE_ARTIFACT_PATH"
      #     echo '----------------------'
      #     echo "SOFA_ROOT = $SOFA_ROOT"
      #     echo '----------------------'
      #     python -c "import sys; print('sys.version = ' + str(sys.version)); print('sys.path = ' + str(sys.path))"

      # - name: Run tests CosseratPlugin_test
      #   if: always()
      #   shell: bash
      #   run: |
      #     cd $WORKSPACE_BUILD_PATH
      #     ./bin/CosseratPlugin_test${{ steps.sofa.outputs.exe }}

  deploy:
      name: Deploy artifacts
      if: always() && startsWith(github.ref, 'refs/heads/') # we are on a branch (not a PR)
      needs: [build-and-test]
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Get artifacts
          uses: actions/download-artifact@v2
          with:
            path: artifacts

        - name: Zip artifacts
          shell: bash
          run: |
            cd $GITHUB_WORKSPACE/artifacts
            for artifact in *; do
              zip $artifact.zip -r $artifact/*
            done
        - name: Upload release
          uses: softprops/action-gh-release@v1
          with:
            name: ${{ github.ref_name }}
            tag_name: release-${{ github.ref_name }}
            fail_on_unmatched_files: true 
            files: |
              artifacts/CosseratPlugin_*_Linux.zip
              artifacts/CosseratPlugin_*_Windows.zip
