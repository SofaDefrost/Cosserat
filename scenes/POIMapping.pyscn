# -*- coding: utf-8 -*-

import Sofa
import SofaPython
from math import sin,cos, sqrt, pi
import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'


class Animation(Sofa.PythonScriptController):

    def __init__(self, rigidBaseNode, rateAngularDeformNode):
        self.rigidBaseNode = rigidBaseNode
        self.rateAngularDeformNode = rateAngularDeformNode

        self.rate = 1;
        self.angularRate=0.1;

        return;




    def initGraph(self, nodeRigid):
        self.rigidBaseMO = self.rigidBaseNode.getObject('RigidBaseMO')
        self.rateAngularDeformMO = self.rateAngularDeformNode.getObject('rateAngularDeformMO')


    def onKeyPressed(self, c):

        if ord(c)==19: # up
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][1] += self.rate
            self.rigidBaseMO.findData('position').value = pos

            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][1] += self.angularRate
            self.rateAngularDeformMO.findData('position').value = posA


        if ord(c)==21: # down
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][1] -= self.rate
            self.rigidBaseMO.findData('position').value = pos

            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][1] -= self.angularRate
            self.rateAngularDeformMO.findData('position').value = posA


        if ord(c)==18: # left
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][2] -= self.rate
            self.rigidBaseMO.findData('position').value = pos

            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][2] -= self.angularRate
            self.rateAngularDeformMO.findData('position').value = posA

        if ord(c)==20: # right
            pos = self.rigidBaseMO.findData('position').value;
            pos[0][2] += self.rate
            self.rigidBaseMO.findData('position').value = pos

            posA = self.rateAngularDeformMO.findData('position').value;
            for i in range(len(posA)):
                posA[i][2] += self.angularRate
            self.rateAngularDeformMO.findData('position').value = posA




def normalize(q):
    norm = sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]+q[3]*q[3]);
    q_return= q
    for i in range(4):
        q_return[i] = q[i]/sqrt(norm);

    return q_return



#Multiplication of two quaternions (gives the composition of the two rotation)
def rotateQuat(q1,q2):
    c0 = q1[3]*q2[3] - q1[0]*q2[0] - q1[1]*q2[1] - q1[2]*q2[2]
    c1 = q1[3]*q2[0] + q1[0]*q2[3] + q1[1]*q2[2] - q1[2]*q2[1]
    c2 = q1[3]*q2[1] + q1[1]*q2[3] + q1[2]*q2[0] - q1[0]*q2[2]
    c3 = q1[3]*q2[2] + q1[2]*q2[3] + q1[0]*q2[1] - q1[1]*q2[0]

    q1 = [c1,c2,c3,c0]

    return q1




#Rotate a vector using a quaternion v'=qvq(-1)
def rotate(v,q):
    c =[ ]
    c = c+[ ((1.0 - 2.0 * (q[1] * q[1] + q[2] * q[2]))*v[0] + (2.0 * (q[0] * q[1] - q[2] * q[3])) * v[1] + (2.0 * (q[2] * q[0] + q[1] * q[3])) * v[2])]
    c = c+[ ((2.0 * (q[0] * q[1] + q[2] * q[3]))*v[0] + (1.0 - 2.0 * (q[2] * q[2] + q[0] * q[0]))*v[1] + (2.0 * (q[1] * q[2] - q[0] * q[3]))*v[2]) ]
    c = c+[ ((2.0 * (q[2] * q[0] - q[1] * q[3]))*v[0] + (2.0 * (q[1] * q[2] + q[0] * q[3]))*v[1] + (1.0 - 2.0 * (q[1] * q[1] + q[0] * q[0]))*v[2]) ]


    return c



def inverseQuat(q):
    return [ -q[0], -q[1], -q[2], q[3] ]


def inverseTransform(a_H_b):
    b_H_a=[ ]
    q = [ a_H_b[3], a_H_b[4], a_H_b[5], a_H_b[6] ] ;
    v = rotate([ a_H_b[0], a_H_b[1],a_H_b[2] ], inverseQuat(q));
    b_H_a= b_H_a +  [-v[0], -v[1], -v[2]];
    b_H_a= b_H_a +  inverseQuat( q ) ;

    return b_H_a







def composeTransform(a_H_b, b_H_c):
    a_H_c = [ ]


    b_c_in_a = rotate([ b_H_c[0], b_H_c[1], b_H_c[2]],  [a_H_b[3], a_H_b[4], a_H_b[5],a_H_b[6]]  )


    a_H_c = a_H_c + [ a_H_b[0] + b_c_in_a[0],  a_H_b[1] + b_c_in_a[1], a_H_b[2] + b_c_in_a[2] ]
    a_H_c = a_H_c + rotateQuat([a_H_b[3], a_H_b[4], a_H_b[5],a_H_b[6]] , [b_H_c[3], b_H_c[4], b_H_c[5],b_H_c[6]] )

    return a_H_c


def compute_b_H_c(a_H_b,a_H_c):
    return composeTransform(inverseTransform(a_H_b),a_H_c)



######## to be improved:
def dummyInterpolateTransform(a_H_b, a_H_c, alpha):

    a_H_result = [0,0,0, 0,0,0,1];

    for i in range(3):
        a_H_result[i] = (1-alpha)*a_H_b[i] + alpha*a_H_c[i]

    q = [0,0,0,1];
    for i in range(4):
        q[i] =  (1-alpha)*a_H_b[i+3] + alpha*a_H_c[i+3]

    q = normalize(q)

    for i in range(4):
        a_H_result[i+3]  = q[i]

    return a_H_result




def createScene(rootNode):

                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots SofaPython SofaSparseSolver CosseratPlugin BeamAdapter', printLog='0')
                rootNode.createObject('VisualStyle', displayFlags='hideVisualModels showBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields hideInteractionForceFields hideWireframe')
                #rootNode.createObject('FreeMotionAnimationLoop')
                #rootNode.createObject('GenericConstraintSolver', tolerance="1-2")

                rootNode.createObject('CollisionPipeline', verbose="0")
                rootNode.createObject('BruteForceDetection', name="N2")
                rootNode.gravity = "0 0 0"
                rootNode.dt="0.01"
                #rootNode.createObject('BackgroundSetting', color='0 0.168627 0.511765')
                #rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")
                #rootNode.createObject('PythonScriptController', filename="controller/FingerController.py", classname="controller")



                rootNode.createObject('EulerImplicitSolver', firstOrder="0", rayleighStiffness="0.10", rayleighMass='0.10')
                #rootNode.createObject('StaticSolver')
                rootNode.createObject('CGLinearSolver', name='solver', tolerance='1e-5',  threshold='1e-5')
                ###############hresho
                ## RigidBase
                ###############
                rigidBaseNode= rootNode.createChild('rigidBase')
                rigidBaseNode.createObject('GenericConstraintCorrection')

                RigidBaseMO = rigidBaseNode.createObject('MechanicalObject', template='Rigid3d', name="RigidBaseMO", position="0 0 0  0 0 0. 1", showObject='1', showObjectScale='1', velocity='0 0 0.0 0.0 0 0' )
                rigidBaseNode.createObject('RestShapeSpringsForceField', name='spring', stiffness="50", angularStiffness="50", external_points="0", mstate="@RigidBaseMO", points="0", template="Rigid3d"  )

                #rigidBaseNode.createObject('UniformMass', totalMass='0.1' )


                ###############
                ## Rate of angular Deformation  (2 sections)
                ###############

                #pos = pi

                array1 = [0.0,0.0,0.0]
                array2 = [0.0,0.0,0.0]
                pos = [array1, array2]

                rateAngularDeformNode = rootNode.createChild('rateAngularDeform')
                rateAngularDeformMO = rateAngularDeformNode.createObject('MechanicalObject', template='Vec3d', name='rateAngularDeformMO', position=pos, velocity='0 0 0 0 0 0') # (2 series of 3 angles for 2 sections. we suppose that the lenght is 10 for each)

                BeamHookeLawForce = rateAngularDeformNode.createObject('BeamHookeLawForceField', crossSectionShape='circular', length='10 10', radius='0.5', youngModulus='5e4')

                rateAngularDeformNode.createObject('UniformMass', totalMass='0.1' )

                #BeamHookeLawForce = rateAngularDeformNode.createObject('ConstantForceField', forces='0 0 0 0 0 0')





                #############@
                ### Animation (to move the dofs)
                ##############
                #anim = Animation(rigidBaseNode,rateAngularDeformNode);


                ##############
                ## Frames
                ##############
                # the node of the frame needs to inherit from rigidBaseMO and rateAngularDeform
                mappedFrameNode = rigidBaseNode.createChild('MappedFrames')
                rateAngularDeformNode.addChild(mappedFrameNode)

                force1=[0.0,0.0,0.0,0.0,0.0,0.0]
                force2=[0.0,0.0,0.0,0.0,0.0,0.0]

                Force = [force1,force2,force2,force2,force2]
                framesMO = mappedFrameNode.createObject('MechanicalObject', template='Rigid3d', name="FramesMO", position="0.5 0 0  0 0 0 1  5 0 0 0 0 0 1   11 0 0  0 0 0 1   15 0 0 0 0 0 1  20 0 0  0 0 0 1", showObject='1', showObjectScale='1' )

                forceFied = mappedFrameNode.createObject('ConstantForceField', indices="4", forces="-20 0 0 0 0 0")
                #mappedFrameNode.createObject('FixedConstraint', fixAll='1')

                # The mapping has two inputs: RigidBaseMO and rateAngularDeformMO
                #                 one output: FramesMO

                inputMO = rateAngularDeformMO.getLinkPath() # + " " + RigidBaseMO.getLinkPath()
                #inputMO = rateAngularDeformMO.getLinkPath()
                inputMO_rigid = RigidBaseMO.getLinkPath()
                outputMO = framesMO.getLinkPath()
                # TODO:
                mappedFrameNode.createObject('DiscretCosseratMapping', curv_abs_input='0 10 20', curv_abs_output='0.5 5 10 15 20', input1=inputMO, input2=inputMO_rigid,output=outputMO, debug='1' )


                return rootNode





                return rootNode
