# -*- coding: utf-8 -*-
import Sofa
import os, sys
from splib.numerics import sin, cos, to_radians
path = os.path.dirname(os.path.abspath(__file__))+'/'


import Sofa

class Controller(Sofa.PythonScriptController):

    def __init__(self):
        pass

    def initGraph(self, node):
            self.node = node
            self.time = 0.0
            plotFile = open("cylinder_1.txt","w")

            for k in range(16) :
                print str(k*0.05)+" "+str(0.005)+" "+str(0.0)

    def onBeginAnimationStep(self, dt):
            # plotFile = open("cylinder_1.txt","a")
            inputvalue = self.node.getObject('aCableActuator').findData('value')
            print("current inputValue : "+str(inputvalue))
            self.time = self.time + dt;
            displacement = inputvalue.value[0][0] + 0.01

            if displacement < 0.3:
                # plotFile.write(" "+ str(self.time)+"    "+str(displacement)+" \n")
                print (" "+ str(self.time)+"    "+str(displacement))
                inputvalue.value = str(displacement)

def createScene(rootNode):
                rootNode.createObject('RequiredPlugin', pluginName='SoftRobots SofaPython SofaSparseSolver SofaPreconditioner SofaOpenglVisual CosseratPlugin BeamAdapter')
                rootNode.createObject('VisualStyle', displayFlags='showBehaviorModels showVisualModels showForceFields showVisual showCollisionModels hideWireframe showInteractionForceFields')

                rootNode.createObject('FreeMotionAnimationLoop')
                rootNode.createObject('GenericConstraintSolver', tolerance="1e-5", maxIterations="2000", printLog="0")
                rootNode.gravity = "0 0 0"
                rootNode.dt="0.01"
                rootNode.createObject('BackgroundSetting', color=' 1 1 1 ')
                rootNode.createObject('OglSceneFrame', style="Arrows", alignment="TopRight")

                topo = rootNode.createChild('topo')
                topo.createObject('CylinderGridTopology', name="grid", nx="5", ny="5", nz="20", length="0.75", radius="0.01", axis="1 0 0" )



                tetraMesh = rootNode.createChild('tetraMesh')
                tetraMesh.createObject('EulerImplicitSolver', rayleighStiffness="0.1", rayleighMass='0.1', firstOrder="0")
                # CylinderFEMNode.createObject('StaticSolver')
                # CylinderFEMNode.createObject('CGLinearSolver', iterations="25", tolerance="0.000001", threshold="1e-5")
                # CylinderFEMNode.createObject('PCGLinearSolver', preconditioners='solver', tolerance="1e-15")
                tetraMesh.createObject('SparseLDLSolver', name='solver')

                # tetraMesh.createObject('MeshVTKLoader', name='loader', filename=path+'cylinder.vtk', rotation="0 0 0")
                # tetraMesh.createObject('TetrahedronSetTopologyContainer', src='@loader')
                tetraMesh.createObject('TetrahedronSetTopologyContainer', name="Container", position="@../topo/grid.position")
                tetraMesh.createObject('TetrahedronSetTopologyModifier', name="Modifier")
                tetraMesh.createObject('TetrahedronSetTopologyAlgorithms', template="Vec3d", name="TopoAlgo" )
                tetraMesh.createObject('TetrahedronSetGeometryAlgorithms',  template="Vec3d", name="GeomAlgo" )
                tetraMesh.createObject('Hexa2TetraTopologicalMapping', name="default28", input="@../topo/grid", output="@Container" )

                tetraMesh.createObject('MechanicalObject', name="Hexa")
                tetraMesh.createObject('UniformMass', totalMass="1e-10")
                # tetraMesh.createObject('MeshExporter', filename="cylinder", format="vtk", edges="0", triangles="0", tetras="1", listening="true", exportAtBegin="true")
                tetraMesh.createObject('TetrahedronFEMForceField', name="FEM", youngModulus="1e6", poissonRatio="0.48", method="polar")

                tetraMesh.createObject('BoxROI', name='ROI1', box="-0.01 -0.02 -0.05 0.038 0.02 0.05" , drawBoxes='true')
                tetraMesh.createObject('RestShapeSpringsForceField', points='@ROI1.indices', stiffness='1e12')
                # CylinderFEMNode.createObject('TetrahedronFEMForceField', name="FEM", youngModulus="1e6", poissonRatio="0.48")
                # CylinderFEMNode.createObject('HexahedronFEMForceField', name="FEM", youngModulus="1e6", poissonRatio="0.48", method="large") # method="large"


                # Visu = tetraMesh.createChild('Visu')
                # Visu.createObject('OglModel', name="Visual", material="Default Diffuse 1 0 0 1 0.0392157 Ambient 1 0 0 0.2 1 Specular 0 0 0 1 1 Emissive 0 0 0 1 1 Shininess 0 45 ")
                # Visu.createObject('IdentityMapping', input="@../Hexa", output="@Visual")

                # CylinderFEMNode.createObject('GenericConstraintCorrection', solverName='solver')


                ##########################################
                #               Cable                    #
                ##########################################
                # cable_position=[
                #         " 0.0 0.0025 0.0        0.05 0.0025 0.0     0.1 0.0025 0.0      0.15 0.0025 0.0     0.2 0.0025 0.0      0.25 0.0025 0.0     0.3 0.0025 0.0      0.35 0.0025 0.0" +
                #         "  0.4 0.0025 0.0       0.45 0.0025 0.0     0.5 0.0025 0.0      0.55 0.0025 0.0     0.6 0.0025 0.0      0.65 0.0025 0.0     0.7 0.0025 0.0      0.75 0.0025 0.0 "
                # ]
                cable_position=[
                        " 0.0 0.005 0.0        0.05 0.005 0.0     0.1 0.005 0.0      0.15 0.005 0.0     0.2 0.005 0.0      0.25 0.005 0.0     0.3 0.005 0.0      0.35 0.005 0.0" +
                        "  0.4 0.005 0.0       0.45 0.005 0.0     0.5 0.005 0.0      0.55 0.005 0.0     0.6 0.005 0.0      0.65 0.005 0.0     0.7 0.005 0.0      0.75 0.005 0.0 "
                ]
                # # #  This create a new node in the scene. This node is appended to the finger's node.


                cable = tetraMesh.createChild('cable')
                cable.createObject('MechanicalObject', name="cablePos", position=cable_position,  showObject="1", showIndices="0")
                cable.createObject('CableConstraint', name="aCableActuator",
                                        indices=range(0,16),
                                        template='Vec3d',
                                        # pullPoint=" -0.05 0.005 0.0",
                                        hasPullPoint="0",
                                        valueType='force',
                                        minForce=-0.0001,
                                        #value='3.0'
                                        )
                cable.createObject('BarycentricMapping') 

                cable.createObject('PythonScriptController',classname="Controller")

                tetraMesh.createObject('LinearSolverConstraintCorrection')
                # CylinderFEMNode.createObject('GenericConstraintCorrection', solverName='solver')

                return rootNode
